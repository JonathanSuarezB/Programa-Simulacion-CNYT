import math
import simulacion_cuantica as quantum

def test_deterministic_system1():
    # 1 click
    matrix = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,1,0,0,0,1],[0,0,0,1,0,0],[0,0,1,0,0,0],[1,0,0,0,1,0]]
    state = [0,2,1,5,3,10]
    if quantum.deterministic_system(matrix,state,1) == [0,0,12,5,1,3]:
        return (print("Prueba 1 Existosa"))

def test_deterministic_system2():
    # 2 clicks
    matrix = [[0,0,0,0,0,0], [0,0,0,0,0,0], [0,1,0,0,0,1], [0,0,0,1,0,0], [0,0,1,0,0,0],[1,0,0,0,1,0]]
    state = [0,2,1,5,3,10]
    if quantum.deterministic_system(matrix, state, 2) == [0,0,3,5,12,1]:
        return (print("Prueba 2 Existosa"))

def test_probabilistic_system1():
    # 1 click
    matrix = [[0,0,0,0,0,0,0,0],[1/2,0,0,0,0,0,0,0],[1/2,0,0,0,0,0,0,0],[0,1/3,0,0,0,0,0,0],[0,1/3,0,0,0,0,0,0],[0,1/3,1/3,0,0,0,0,0],[0,0,1/3,0,0,0,0,0],[0,0,1/3,0,0,0,0,0]]
    state = [1,0,0,0,0,0,0,0]
    if quantum.probabilistic_system(matrix,state,1) == ('Matriz:', [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 'Estado nuevo:', [0.0, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.3333333333333333, 0.16666666666666666, 0.16666666666666666]):
        return (print("Prueba 3 Existosa"))

def test_probabilistic_system2():
    # 2 clicks
    matrix = [[0,0,0,0,0,0,0,0],[1/2,0,0,0,0,0,0,0],[1/2,0,0,0,0,0,0,0],[0,1/3,0,0,0,0,0,0],[0,1/3,0,0,0,0,0,0],[0,1/3,1/3,0,0,0,0,0],[0,0,1/3,0,0,0,0,0],[0,0,1/3,0,0,0,0,0]]
    state = [1,0,0,0,0,0,0,0]
    if quantum.probabilistic_system(matrix, state, 2) == ('Matriz:', [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 'Estado nuevo:', [0.0, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.3333333333333333, 0.16666666666666666, 0.16666666666666666]):
        (print("Prueba 4 Existosa"))

def test_quantum_system1():
    # 1 click
    matrix = [[0,0,0,0,0,0,0,0],[1/math.sqrt(2),0,0,0,0,0,0,0],[1/math.sqrt(2),0,0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),-1+1j/math.sqrt(6),0,0,0,0,0],[0,0,-1+1j/math.sqrt(6),0,0,0,0,0],[0,0,-1+1j/math.sqrt(6),0,0,0,0,0]]
    state = [1,0,0,0,0,0,0,0]
    if quantum.quantum_system(matrix,state,1) == ('Matriz:', [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 'Estado nuevo:', [0.0, 0.0, 0.0, 0.5833333333333333, 0.5833333333333333, 0.0, 0.5833333333333333, 0.5833333333333333]):
        return (print("Prueba 5 Existosa"))

def test_quantum_system2():
    # 2 clicks
    matrix = [[0,0,0,0,0,0,0,0],[1/math.sqrt(2),0,0,0,0,0,0,0],[1/math.sqrt(2),0,0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),0,0,0,0,0,0],[0,-1+1j/math.sqrt(6),-1+1j/math.sqrt(6),0,0,0,0,0],[0,0,-1+1j/math.sqrt(6),0,0,0,0,0],[0,0,-1+1j/math.sqrt(6),0,0,0,0,0]]
    state = [1,0,0,0,0,0,0,0]
    if quantum.quantum_system(matrix,state,1) == ('Matriz:', [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], 'Estado nuevo:', [0.0, 0.0, 0.0, 0.5833333333333333, 0.5833333333333333, 0.0, 0.5833333333333333, 0.5833333333333333]):
        return (print("Prueba 6 Existosa"))

def test_grafica_1():
    vector = [1,2,3,4,5,6]
    state = [0,2,1,5,3,10]
    if quantum.grafica(vector,state) != None:
        None
    return (print("Prueba 7 Existosa"))

def test_grafica_2():
    vector = [0,1,2,3,4,5]
    state = [0,2,1,5,3,10]
    if quantum.grafica(vector,state) != None:
        None
    return (print("Prueba 8 Existosa"))


if __name__ == '__main__':
    test_deterministic_system1()
    test_deterministic_system2()
    test_probabilistic_system1()
    test_probabilistic_system2()
    test_quantum_system1()
    test_quantum_system2()
    test_grafica_1()
    test_grafica_2()